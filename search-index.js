var N=null,E="",T="t",U="u",searchIndex={};
var R=["cipher","cryptographer","result","error","block_size","BLOCK_SIZE","The `Hash` trait specifies the common interface for hash…","block_size returns the hash's underlying block size. The…","usize","reset resets the Hash to its initial state","size returns the number of bytes Sum will return","sum returns the resulting slice. It does not change the…","Error enumerations related cryptographic operations in…","ripemd160","cryptographer::x","SigError","generate_key","privatekey","publickey","PrivateKey","PublicKey","PRIVATE_KEY_LEN","SIGNATURE_LEN","keccak256","keccak512","SIZE224","cryptographer::aes","try_from","try_into","borrow_mut","cryptographer::ed25519","type_id","borrow","typeid","cryptographer::hmac","cryptographer::rand","cryptographer::rc4","cryptographer::x::secp256k1","cryptographer::x::sha3","genericarray","result_reset","output_size","dyndigest","to_owned","clone_into","initialize","box_clone","fixed_result","formatter","string","shake128","shake256","ShakeHash","Keccak256","Keccak512","SHAKE128","SHAKE256","SHA512_224","SHA512_256","RIPEMD160","SHA3_224","SHA3_256","SHA3_384","SHA3_512"];

searchIndex["cryptographer"]={"doc":E,"i":[[0,"aes",R[1],"module aes implements AES encryption (formerly Rijndael),…",N,N],[4,"Cipher",R[26],"Cipher enumerate AES variants based on different key sizes",N,N],[13,"AES128",E,"AES based on 128-bit keys",0,N],[13,"AES192",E,"AES based on 192-bit keys",0,N],[13,"AES256",E,"AES based on 256-bit keys",0,N],[4,"Error",E,R[12],N,N],[13,"KeySize",E,E,1,N],[5,"new_cipher",E,"new_cipher creates and returns a new cipher.Block. The key…",N,[[],[[R[2],[R[0],R[3]]],[R[0]],[R[3]]]]],[17,R[5],E,"The AES block size in bytes.",N,N],[0,R[0],R[1],"module cipher implements standard block cipher modes that…",N,N],[8,"Block","cryptographer::cipher","A Block represents an implementation of block cipher using…",N,N],[10,R[4],E,"block_size returns the cipher's block size.",2,[[["self"]],[R[8]]]],[10,"encrypt",E,E,2,[[["self"]]]],[10,"decrypt",E,E,2,[[["self"]]]],[0,"ed25519",R[1],"module ed25519 implements the Ed25519 signature algorithm.…",N,N],[3,R[19],R[30],"PrivateKey is the type of Ed25519 private keys",N,N],[3,R[20],E,"PublicKey is the type of Ed25519 public keys",N,N],[4,"Error",E,E,N,N],[13,"IOError",E,E,3,N],[13,R[15],E,E,3,N],[5,R[16],E,E,N,[[[T]],[[R[2],[R[3]]],[R[3]]]]],[5,"sign",E,E,N,[[[R[17]]],[["vec",["u8"]],["u8"]]]],[5,"verify",E,E,N,[[[R[18]]],[[R[2],[R[3]]],[R[3]]]]],[17,"PUBLIC_KEY_LEN",E,"PUBLIC_KEY_LEN is the size, in bytes, of public keys as…",N,N],[17,R[21],E,"PRIVATE_KEY_LEN is the size, in bytes, of private keys as…",N,N],[17,R[22],E,"SIGNATURE_LEN is the size, in bytes, of signatures…",N,N],[0,"elliptic",R[1],"module elliptic implements several standard elliptic…",N,N],[0,"curve25519","cryptographer::elliptic","module curve25519 provides an implementation of the X25519…",N,N],[5,"x25519","cryptographer::elliptic::curve25519","x25519 is an alias of scalar_mult(). The bare,…",N,[[]]],[5,"scalar_mult",E,"scalar_mult calculates the product scalar * BASEPOINT. The…",N,[[]]],[5,"scalar_base_mult",E,"scalar_base_mult calculates the product k * BASEPOINT,…",N,[[]]],[17,"BASEPOINT",E,"BASEPOINT is the canonical Curve25519 generator",N,N],[0,"hmac",R[1],"module hmac implements the Keyed-Hash Message…",N,N],[3,"HMAC",R[34],"HMAC implements the Keyed-Hash Message Authentication Code…",N,N],[5,"new",E,"new returns a new HMAC hash using the given Hash type as…",N,[[["f"]],["hmac"]]],[5,"sum",E,"sum calculates the HMAC for given data based on given key,…",N,[[["f"]],[["vec",["u8"]],["u8"]]]],[8,"Hash",E,R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[0,"md5",R[1],"module md5 implements the MD5 hash algorithm as defined in…",N,N],[5,"new","cryptographer::md5","new returns a new hash.Hash computing the MD5 checksum.",N,[[],["md5"]]],[5,"sum",E,"sum returns the MD5 checksum of the data.",N,[[]]],[6,"MD5",E,"A MD5 is an instance of MD5.",N,N],[17,R[5],E,"The blocksize of MD5 in bytes.",N,N],[17,"SIZE",E,"The size of an MD5 checksum in bytes.",N,N],[8,"Hash",E,R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[0,"rand",R[1],E,N,N],[3,"Rand",R[35],E,N,N],[11,"new",E,E,5,[[],["self"]]],[0,"rc4",R[1],"module rc4 implements RC4 encryption, as defined in Bruce…",N,N],[3,"Cipher",R[36],"Cipher is an instance of RC4 using a particular key.",N,N],[4,"Error",E,R[12],N,N],[13,"KeySize",E,E,6,N],[5,"new",E,"NewCipher creates and returns a new Cipher. The key…",N,[[],[[R[0]],[R[2],[R[0],R[3]]],[R[3]]]]],[11,"reset",E,"Reset zeros the key data and makes the Cipher unusable.",7,[[["self"]]]],[11,"xor_key_stream",E,"xor_key_stream sets dst to the result of XORing src with…",7,[[["self"]]]],[0,"sha1",R[1],"module sha1 implements the SHA-1 hash algorithm as defined…",N,N],[5,"new","cryptographer::sha1","new returns a new hash.Hash computing the SHA-1 checksum.",N,[[],["sha1"]]],[5,"sum",E,"sum returns the SHA-1 checksum of the data.",N,[[]]],[6,"SHA1",E,"SHA1 alias Sha3_256 and implements crate::Hash.",N,N],[17,R[5],E,"The blocksize of SHA-1 in bytes.",N,N],[17,"SIZE",E,"The size of a SHA-1 checksum in bytes.",N,N],[0,"sha256",R[1],E,N,N],[5,"new","cryptographer::sha256",E,N,[[],["sha256"]]],[5,"new224",E,E,N,[[],["sha224"]]],[5,"sum224",E,E,N,[[]]],[5,"sum256",E,E,N,[[]]],[6,"SHA224",E,E,N,N],[6,"SHA256",E,E,N,N],[17,R[5],E,E,N,N],[17,"SIZE",E,E,N,N],[17,R[25],E,E,N,N],[8,"Hash",E,R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[0,"sha512",R[1],E,N,N],[5,"new512_224","cryptographer::sha512",E,N,[[],["sha512_224"]]],[5,"sum512_224",E,E,N,[[]]],[5,"new512_256",E,E,N,[[],["sha512_256"]]],[5,"sum512_256",E,E,N,[[]]],[5,"new384",E,E,N,[[],["sha384"]]],[5,"sum384",E,E,N,[[]]],[5,"new",E,E,N,[[],["sha512"]]],[5,"sum512",E,E,N,[[]]],[6,R[57],E,E,N,N],[6,R[58],E,E,N,N],[6,"SHA384",E,E,N,N],[6,"SHA512",E,E,N,N],[17,R[5],E,E,N,N],[17,R[25],E,E,N,N],[17,"SIZE256",E,E,N,N],[17,"SIZE384",E,E,N,N],[17,"SIZE",E,E,N,N],[8,"Hash",E,R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[0,"subtle",R[1],"module subtle implements functions that are often useful…",N,N],[5,"constant_time_byte_eq","cryptographer::subtle","constant_time_byte_eq returns 1 if x == y and 0 otherwise.",N,[[["u8"]],["isize"]]],[5,"constant_time_compare",E,"constant_time_compare returns 1 if the two slices, x and…",N,[[],["isize"]]],[5,"constant_time_copy",E,"constant_time_copy copies the contents of y into x (a…",N,[[["isize"]]]],[5,"constant_time_eq",E,"constant_time_eq returns 1 if x == y and 0 otherwise.",N,[[["i32"]],["isize"]]],[5,"constant_time_less_or_eq",E,"constant_time_less_or_eq returns 1 if x <= y and 0…",N,[[["isize"]],["isize"]]],[5,"constant_time_select",E,"constant_time_select returns x if v == 1 and y if v == 0.…",N,[[["isize"]],["isize"]]],[0,"x",R[1],"module x implements supplementary cryptography libraries.",N,N],[0,R[13],R[14],E,N,N],[5,"new","cryptographer::x::ripemd160",E,N,[[],[R[13]]]],[5,"sum",E,E,N,[[]]],[6,R[59],E,E,N,N],[17,R[5],E,E,N,N],[17,"SIZE",E,E,N,N],[8,"Hash",E,R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[0,"secp256k1",R[14],E,N,N],[4,"Error",R[37],E,N,N],[13,"IOError",E,E,8,N],[13,R[15],E,E,8,N],[13,"InvalidSigError",E,E,8,N],[5,R[16],E,E,N,[[[T]],[[R[17]],[R[3]],[R[2],[R[17],R[3]]]]]],[5,"sign",E,E,N,[[[R[17]]],[["vec",["u8"]],[R[3]],[R[2],["vec",R[3]]]]]],[5,"verify",E,E,N,[[[R[18]]],[[R[2],[R[3]]],[R[3]]]]],[6,R[19],E,E,N,N],[6,R[20],E,E,N,N],[17,R[21],E,E,N,N],[17,R[22],E,E,N,N],[0,"sha3",R[14],"module sha3 implements the SHA-3 fixed-output-length hash…",N,N],[3,R[53],R[38],"Keccak256 is re-exported and implements Hash.",N,N],[3,R[54],E,"Keccak512 is re-exported and implements Hash.",N,N],[3,R[55],E,"SHAKE128 is the 128-bit SHAKE variable-output-length hash…",N,N],[3,R[56],E,"SHAKE256 is the 256-bit SHAKE variable-output-length hash…",N,N],[5,"new_legacy_keccak256",E,"new_legacy_keccak256 creates a new Keccak-256 hash.",N,[[],[R[23]]]],[5,R[23],E,"keccak256 returns the Keccak-256 digest of the data.",N,[[]]],[5,"new_legacy_keccak512",E,"new_legacy_keccak512 creates a new Keccak-512 hash.",N,[[],[R[24]]]],[5,R[24],E,"keccak512 returns the Keccak-512 digest of the data.",N,[[]]],[5,"new_shake128",E,"new_shake128 creates a new SHAKE128 variable-output-length…",N,[[],[R[50]]]],[5,"shake_sum128",E,"shake_sum128 writes an arbitrary-length digest of data…",N,[[],[[R[2],[R[8]]],[R[8]]]]],[5,"new_shake256",E,"new_shake256 creates a new SHAKE256 variable-output-length…",N,[[],[R[51]]]],[5,"shake_sum256",E,"shake_sum256 writes an arbitrary-length digest of data…",N,[[],[[R[2],[R[8]]],[R[8]]]]],[5,"new224",E,"new224 creates a new SHA3-224 hash. Its generic security…",N,[[],["sha3_224"]]],[5,"sum224",E,"sum224 returns the SHA3-224 digest of the data.",N,[[]]],[5,"new256",E,"new256 creates a new SHA3-256 hash. Its generic security…",N,[[],["sha3_256"]]],[5,"sum256",E,"sum256 returns the SHA3-256 digest of the data.",N,[[]]],[5,"new384",E,"new384 creates a new SHA3-384 hash. Its generic security…",N,[[],["sha3_384"]]],[5,"sum384",E,"sum384 returns the SHA3-384 digest of the data.",N,[[]]],[5,"new512",E,"new512 creates a new SHA3-512 hash. Its generic security…",N,[[],["sha3_512"]]],[5,"sum512",E,"sum512 returns the SHA3-512 digest of the data.",N,[[]]],[6,R[60],E,"SHA3_224 alias Sha3_224 and implements Hash.",N,N],[6,R[61],E,"SHA3_256 alias Sha3_256 and implements crate::Hash.",N,N],[6,R[62],E,"SHA3_384 alias Sha3_384 and implements Hash.",N,N],[6,R[63],E,"SHA3_512 alias Sha3_512 and implements Hash.",N,N],[17,"BLOCK_SIZE224",E,"The blocksize of SHA3-224 in bytes.",N,N],[17,R[25],E,"The size of a SHA3-224 checksum in bytes.",N,N],[17,"BLOCK_SIZE256",E,"The blocksize of SHA3-256 and Keccak-256 in bytes.",N,N],[17,"SIZE256",E,"The size of a SHA3-256 and Keccak-256 checksum in bytes.",N,N],[17,"BLOCK_SIZE384",E,"The blocksize of SHA3-384 in bytes.",N,N],[17,"SIZE384",E,"The size of a SHA3-384 checksum in bytes.",N,N],[17,"BLOCK_SIZE512",E,"The blocksize of SHA3-512 and Keccak-512 in bytes.",N,N],[17,"SIZE512",E,"The size of a SHA3-512 and Keccak-512 checksum in bytes.",N,N],[8,"Hash",E,R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[8,R[52],E,"ShakeHash specifies the trait for SHAKE-variant hash.",N,N],[10,"reset",E,R[9],9,[[["self"]]]],[8,"Hash",R[1],R[6],N,N],[10,R[4],E,R[7],4,[[],[R[8]]]],[10,"reset",E,R[9],4,[[["self"]]]],[10,"size",E,R[10],4,[[],[R[8]]]],[10,"sum",E,R[11],4,[[["self"]],[["vec",["u8"]],["u8"]]]],[8,R[19],E,"PrivateKey represents a private key using an unspecified…",N,N],[8,R[20],E,"PublicKey represents a public key using an unspecified…",N,N],[8,"Signer",E,"Signer is an interface for an opaque private key that can…",N,N],[16,R[20],E,E,10,N],[10,"public",E,"Public returns the public key corresponding to the opaque,…",10,[[["self"]]]],[10,"sign",E,"Sign signs digest with the private key, possibly using…",10,[[["self"],[T]],[[R[2],["vec",R[49]]],["vec",["u8"]],[R[49]]]]],[11,"into",R[26],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[27],E,E,0,[[[U]],[R[2]]]],[11,R[28],E,E,0,[[],[R[2]]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[31],E,E,0,[[["self"]],[R[33]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[27],E,E,1,[[[U]],[R[2]]]],[11,R[28],E,E,1,[[],[R[2]]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[31],E,E,1,[[["self"]],[R[33]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"into",R[30],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[27],E,E,11,[[[U]],[R[2]]]],[11,R[28],E,E,11,[[],[R[2]]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[31],E,E,11,[[["self"]],[R[33]]]],[11,"vzip",E,E,11,[[],["v"]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[27],E,E,12,[[[U]],[R[2]]]],[11,R[28],E,E,12,[[],[R[2]]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[29],E,E,12,[[["self"]],[T]]],[11,R[31],E,E,12,[[["self"]],[R[33]]]],[11,"vzip",E,E,12,[[],["v"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[27],E,E,3,[[[U]],[R[2]]]],[11,R[28],E,E,3,[[],[R[2]]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[31],E,E,3,[[["self"]],[R[33]]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"into",R[34],E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[27],E,E,13,[[[U]],[R[2]]]],[11,R[28],E,E,13,[[],[R[2]]]],[11,R[32],E,E,13,[[["self"]],[T]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[31],E,E,13,[[["self"]],[R[33]]]],[11,"vzip",E,E,13,[[],["v"]]],[11,"into",R[35],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[27],E,E,5,[[[U]],[R[2]]]],[11,R[28],E,E,5,[[],[R[2]]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[31],E,E,5,[[["self"]],[R[33]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,"into",R[36],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[27],E,E,7,[[[U]],[R[2]]]],[11,R[28],E,E,7,[[],[R[2]]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[31],E,E,7,[[["self"]],[R[33]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[27],E,E,6,[[[U]],[R[2]]]],[11,R[28],E,E,6,[[],[R[2]]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[31],E,E,6,[[["self"]],[R[33]]]],[11,"vzip",E,E,6,[[],["v"]]],[11,"into",R[37],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[27],E,E,8,[[[U]],[R[2]]]],[11,R[28],E,E,8,[[],[R[2]]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[31],E,E,8,[[["self"]],[R[33]]]],[11,"vzip",E,E,8,[[],["v"]]],[11,"into",R[38],E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[43],E,E,14,[[["self"]],[T]]],[11,R[44],E,E,14,[[["self"],[T]]]],[11,R[27],E,E,14,[[[U]],[R[2]]]],[11,R[28],E,E,14,[[],[R[2]]]],[11,R[32],E,E,14,[[["self"]],[T]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[31],E,E,14,[[["self"]],[R[33]]]],[11,"new",E,E,14,[[],["d"]]],[11,"input",E,E,14,[[["self"],["b"]]]],[11,"chain",E,E,14,[[["b"]],["d"]]],[11,R[2],E,E,14,[[],[[R[39],["u8"]],["u8"]]]],[11,R[40],E,E,14,[[["self"]],[[R[39],["u8"]],["u8"]]]],[11,"reset",E,E,14,[[["self"]]]],[11,R[41],E,E,14,[[],[R[8]]]],[11,"digest",E,E,14,[[],[[R[39],["u8"]],["u8"]]]],[11,"clear",E,E,14,[[["self"]]]],[11,R[45],E,E,14,[[]]],[11,"input",E,E,14,[[["self"]]]],[11,R[40],E,E,14,[[["self"]],["box"]]],[11,R[2],E,E,14,[[["box"]],["box"]]],[11,"reset",E,E,14,[[["self"]]]],[11,R[41],E,E,14,[[["self"]],[R[8]]]],[11,R[46],E,E,14,[[["self"]],[["box",[R[42]]],[R[42]]]]],[11,"vzip",E,E,14,[[],["v"]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[43],E,E,15,[[["self"]],[T]]],[11,R[44],E,E,15,[[["self"],[T]]]],[11,R[27],E,E,15,[[[U]],[R[2]]]],[11,R[28],E,E,15,[[],[R[2]]]],[11,R[32],E,E,15,[[["self"]],[T]]],[11,R[29],E,E,15,[[["self"]],[T]]],[11,R[31],E,E,15,[[["self"]],[R[33]]]],[11,"new",E,E,15,[[],["d"]]],[11,"input",E,E,15,[[["self"],["b"]]]],[11,"chain",E,E,15,[[["b"]],["d"]]],[11,R[2],E,E,15,[[],[[R[39],["u8"]],["u8"]]]],[11,R[40],E,E,15,[[["self"]],[[R[39],["u8"]],["u8"]]]],[11,"reset",E,E,15,[[["self"]]]],[11,R[41],E,E,15,[[],[R[8]]]],[11,"digest",E,E,15,[[],[[R[39],["u8"]],["u8"]]]],[11,"clear",E,E,15,[[["self"]]]],[11,R[45],E,E,15,[[]]],[11,"input",E,E,15,[[["self"]]]],[11,R[40],E,E,15,[[["self"]],["box"]]],[11,R[2],E,E,15,[[["box"]],["box"]]],[11,"reset",E,E,15,[[["self"]]]],[11,R[41],E,E,15,[[["self"]],[R[8]]]],[11,R[46],E,E,15,[[["self"]],[["box",[R[42]]],[R[42]]]]],[11,"vzip",E,E,15,[[],["v"]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[43],E,E,16,[[["self"]],[T]]],[11,R[44],E,E,16,[[["self"],[T]]]],[11,R[27],E,E,16,[[[U]],[R[2]]]],[11,R[28],E,E,16,[[],[R[2]]]],[11,R[32],E,E,16,[[["self"]],[T]]],[11,R[29],E,E,16,[[["self"]],[T]]],[11,R[31],E,E,16,[[["self"]],[R[33]]]],[11,"vzip",E,E,16,[[],["v"]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[43],E,E,17,[[["self"]],[T]]],[11,R[44],E,E,17,[[["self"],[T]]]],[11,R[27],E,E,17,[[[U]],[R[2]]]],[11,R[28],E,E,17,[[],[R[2]]]],[11,R[32],E,E,17,[[["self"]],[T]]],[11,R[29],E,E,17,[[["self"]],[T]]],[11,R[31],E,E,17,[[["self"]],[R[33]]]],[11,"vzip",E,E,17,[[],["v"]]],[11,"input",E,E,15,[[["self"],["b"]]]],[11,"input",E,E,14,[[["self"],["b"]]]],[11,R[47],E,E,15,[[],[[R[39],["u8"]],["u8"]]]],[11,R[47],E,E,14,[[],[[R[39],["u8"]],["u8"]]]],[11,"reset",E,E,15,[[["self"]]]],[11,"reset",E,E,14,[[["self"]]]],[11,"clone",E,E,14,[[["self"]],[R[23]]]],[11,"clone",E,E,15,[[["self"]],[R[24]]]],[11,"default",E,E,15,[[],[R[24]]]],[11,"default",E,E,14,[[],[R[23]]]],[11,"fmt",E,E,15,[[[R[48]],["self"]],[[R[3]],[R[2],[R[3]]]]]],[11,"fmt",E,E,14,[[[R[48]],["self"]],[[R[3]],[R[2],[R[3]]]]]],[11,"write",E,E,15,[[["self"]],[[R[3]],[R[2],[R[8],R[3]]],[R[8]]]]],[11,"flush",E,E,15,[[["self"]],[[R[2],[R[3]]],[R[3]]]]],[11,"write",E,E,14,[[["self"]],[[R[3]],[R[2],[R[8],R[3]]],[R[8]]]]],[11,"flush",E,E,14,[[["self"]],[[R[2],[R[3]]],[R[3]]]]],[11,"size",R[34],E,13,[[],[R[8]]]],[11,R[4],E,E,13,[[],[R[8]]]],[11,"reset",E,E,13,[[["self"]]]],[11,"sum",E,E,13,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",R[1],E,18,[[],[R[8]]]],[11,R[4],E,E,18,[[],[R[8]]]],[11,"reset",E,E,18,[[["self"]]]],[11,"sum",E,E,18,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,19,[[],[R[8]]]],[11,R[4],E,E,19,[[],[R[8]]]],[11,"reset",E,E,19,[[["self"]]]],[11,"sum",E,E,19,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,20,[[],[R[8]]]],[11,R[4],E,E,20,[[],[R[8]]]],[11,"reset",E,E,20,[[["self"]]]],[11,"sum",E,E,20,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,21,[[],[R[8]]]],[11,R[4],E,E,21,[[],[R[8]]]],[11,"reset",E,E,21,[[["self"]]]],[11,"sum",E,E,21,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,22,[[],[R[8]]]],[11,R[4],E,E,22,[[],[R[8]]]],[11,"reset",E,E,22,[[["self"]]]],[11,"sum",E,E,22,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,23,[[],[R[8]]]],[11,R[4],E,E,23,[[],[R[8]]]],[11,"reset",E,E,23,[[["self"]]]],[11,"sum",E,E,23,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,24,[[],[R[8]]]],[11,R[4],E,E,24,[[],[R[8]]]],[11,"reset",E,E,24,[[["self"]]]],[11,"sum",E,E,24,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,25,[[],[R[8]]]],[11,R[4],E,E,25,[[],[R[8]]]],[11,"reset",E,E,25,[[["self"]]]],[11,"sum",E,E,25,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,26,[[],[R[8]]]],[11,R[4],E,E,26,[[],[R[8]]]],[11,"reset",E,E,26,[[["self"]]]],[11,"sum",E,E,26,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",R[38],E,14,[[],[R[8]]]],[11,R[4],E,E,14,[[],[R[8]]]],[11,"reset",E,E,14,[[["self"]]]],[11,"sum",E,E,14,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,15,[[],[R[8]]]],[11,R[4],E,E,15,[[],[R[8]]]],[11,"reset",E,E,15,[[["self"]]]],[11,"sum",E,E,15,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",R[1],E,27,[[],[R[8]]]],[11,R[4],E,E,27,[[],[R[8]]]],[11,"reset",E,E,27,[[["self"]]]],[11,"sum",E,E,27,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,28,[[],[R[8]]]],[11,R[4],E,E,28,[[],[R[8]]]],[11,"reset",E,E,28,[[["self"]]]],[11,"sum",E,E,28,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,29,[[],[R[8]]]],[11,R[4],E,E,29,[[],[R[8]]]],[11,"reset",E,E,29,[[["self"]]]],[11,"sum",E,E,29,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"size",E,E,30,[[],[R[8]]]],[11,R[4],E,E,30,[[],[R[8]]]],[11,"reset",E,E,30,[[["self"]]]],[11,"sum",E,E,30,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,R[4],R[26],E,0,[[["self"]],[R[8]]]],[11,"decrypt",E,E,0,[[["self"]]]],[11,"encrypt",E,E,0,[[["self"]]]],[11,"reset",R[38],E,16,[[["self"]]]],[11,"reset",E,E,17,[[["self"]]]],[11,"public",R[30],E,11,[[["self"]]]],[11,"sign",E,"@TODO: add the SignerOpts",11,[[["self"],[T]],[[R[2],["vec",R[49]]],["vec",["u8"]],[R[49]]]]],[11,"public",R[1],E,31,[[["self"]]]],[11,"sign",E,E,31,[[["self"],[T]],[[R[2],["vec",R[49]]],["vec",["u8"]],[R[49]]]]],[11,"drop",R[36],"drop calles self.reset internally.",7,[[["self"]]]],[11,"clone",R[38],E,16,[[["self"]],[R[50]]]],[11,"clone",E,E,17,[[["self"]],[R[51]]]],[11,"eq",R[30],E,12,[[["self"],[R[18]]],["bool"]]],[11,"ne",E,E,12,[[["self"],[R[18]]],["bool"]]],[11,"fmt",R[26],E,1,[[["self"],[R[48]]],[R[2]]]],[11,"fmt",R[30],E,12,[[["self"],[R[48]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[48]]],[R[2]]]],[11,"fmt",R[36],E,6,[[["self"],[R[48]]],[R[2]]]],[11,"fmt",R[37],E,8,[[["self"],[R[48]]],[R[2]]]],[11,R[27],R[30],E,12,[[],[R[2]]]],[11,"read",R[35],E,5,[[["self"]],[[R[3]],[R[8]],[R[2],[R[8],R[3]]]]]],[11,"read",R[38],E,16,[[["self"]],[[R[2],[R[8]]],[R[8]]]]],[11,"read",E,E,17,[[["self"]],[[R[2],[R[8]]],[R[8]]]]],[11,"flush",R[34],E,13,[[["self"]],[R[2]]]],[11,"write",E,E,13,[[["self"]],[[R[2],[R[8]]],[R[8]]]]],[11,"flush",R[38],E,16,[[["self"]],[R[2]]]],[11,"write",E,E,16,[[["self"]],[[R[2],[R[8]]],[R[8]]]]],[11,"flush",E,E,17,[[["self"]],[R[2]]]],[11,"write",E,E,17,[[["self"]],[[R[2],[R[8]]],[R[8]]]]]],"p":[[4,"Cipher"],[4,"Error"],[8,"Block"],[4,"Error"],[8,"Hash"],[3,"Rand"],[4,"Error"],[3,"Cipher"],[4,"Error"],[8,R[52]],[8,"Signer"],[3,R[19]],[3,R[20]],[3,"HMAC"],[3,R[53]],[3,R[54]],[3,R[55]],[3,R[56]],[6,"MD5"],[6,"SHA1"],[6,"SHA224"],[6,"SHA256"],[6,R[57]],[6,R[58]],[6,"SHA384"],[6,"SHA512"],[6,R[59]],[6,R[60]],[6,R[61]],[6,R[62]],[6,R[63]],[6,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);